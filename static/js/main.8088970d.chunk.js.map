{"version":3,"sources":["pages/game/style.module.scss","pages/game/ScoreUnit.js","pages/game/game.images.js","pages/game/game.reducer.js","pages/game/Game.js","pages/game/game.service.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ScoreUnit","props","title","value","className","styles","scoreUnit","scoreUnitName","scoreUnitVal","cardsReducer","state","action","type","index","payload","newCards","isDone","isFlipped","Error","getInitialState","imgList","images","length","i","Math","floor","random","splice","doubleList","j","k","temp","map","img","id","imgUrl","getInitialCards","Game","useReducer","cards","dispatch","useState","allClicks","setAllClicks","repeatClicks","setRepeatClicks","matchFound","setMatchFound","isMatch","markAsDone","markFlipped","setTimeout","pageHeader","scores","boxContainer","c","key","box","clsx","boxInner","onClick","includes","clicks","console","log","isNaN","flipCard","cardFace","cardFaceFront","fftxt","cardFaceBack","gameImg","src","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8088970d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageHeader\":\"style_pageHeader__11k6E\",\"scores\":\"style_scores__1dWw7\",\"scoreUnit\":\"style_scoreUnit__1FtiH\",\"scoreUnitName\":\"style_scoreUnitName__22oXh\",\"scoreUnitVal\":\"style_scoreUnitVal__3Wj2h\",\"boxContainer\":\"style_boxContainer__2Y7VZ\",\"box\":\"style_box__3yMNS\",\"boxInner\":\"style_boxInner__2S_Bp\",\"cardFace\":\"style_cardFace__2_2Q8\",\"cardFaceFront\":\"style_cardFaceFront__d8P2a\",\"fftxt\":\"style_fftxt__188cS\",\"cardFaceBack\":\"style_cardFaceBack__ytQ6w\",\"gameImg\":\"style_gameImg__3rJ4P\",\"isFlipped\":\"style_isFlipped__3pQCQ\"};","import React from 'react'\r\nimport styles from './style.module.scss'\r\n\r\nconst ScoreUnit = props => {\r\n    const { title, value } = props\r\n\r\n    return (\r\n        <div className={styles.scoreUnit}>\r\n            <div className={styles.scoreUnitName}>{title}</div>\r\n            <div className={styles.scoreUnitVal}>{value}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScoreUnit","export default {\r\n    root: 'assets/img',\r\n    list: [\r\n        '1.jpg',\r\n        '2.jpg',\r\n        '3.jfif',\r\n        '4.jfif',\r\n        '5.jfif',\r\n        '6.jfif',\r\n        '7.jfif',\r\n        '8.jfif',\r\n        '9.jfif',\r\n        '10.jfif',\r\n        '11.jpg',\r\n        '12.jpeg',\r\n        '13.jfif',\r\n        '14.jfif',\r\n        '15.jfif',\r\n        '16.jfif',\r\n        '17.jpg',\r\n        '18.jfif',\r\n        '19.jfif',\r\n        '20.png',\r\n        '21.png',\r\n        '22.jfif',\r\n        '23.jfif',\r\n        '24.jfif',\r\n        '25.jfif',\r\n        '26.jpg',\r\n        '27.jpg',\r\n        '28.png',\r\n        '29.jpg',\r\n        '30.jfif',\r\n        '31.jfif',\r\n        '32.jfif',\r\n        '33.jfif'\r\n    ]\r\n}","\r\n// ACTION TYPES\r\nexport const MARK_AS_DONE = 'MARK_AS_DONE'\r\nexport const MARK_AS_FLIPPED = 'MARK_AS_FLIPPED'\r\n\r\n/**\r\n * Just like a Redux reducer, \r\n * only difference between reducers of useReducer hook and redux are that\r\n * \r\n * 1. In case of useReducer hook's reducer, we dont specify the state=initialState\r\n * in the reducer function definition default param. Rather supply/control it from\r\n * the useReducer hook, as in, useReducer(reducerFn, initialState)\r\n * \r\n *  2. The default switch case of action.type, in case of useReducer hook's \r\n * reducer function throws an error instead of returning the default state\r\n * \r\n * @param {Object} state | An array of Cards, for cards structure, see game.service.js\r\n * @param {*} action | Normal redux action i.e. { type, payload }\r\n */\r\nexport const cardsReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case MARK_AS_DONE: {\r\n            const { index } = action.payload\r\n            let newCards = [...state]\r\n            newCards[index] = {\r\n                ...newCards[index],\r\n                isDone: true\r\n            }\r\n            return newCards\r\n        }\r\n        case MARK_AS_FLIPPED: {\r\n            const { index, isFlipped } = action.payload\r\n            let newCards = [...state]\r\n            newCards[index] = {\r\n                ...newCards[index],\r\n                isFlipped\r\n            }\r\n            return newCards\r\n        }\r\n        default:\r\n            throw new Error();\r\n    }\r\n}","import React, { useState, useReducer } from 'react'\r\nimport clsx from 'clsx'\r\nimport styles from './style.module.scss'\r\nimport ScoreUnit from './ScoreUnit'\r\nimport { getInitialCards } from './game.service'\r\nimport { cardsReducer, MARK_AS_DONE, MARK_AS_FLIPPED } from './game.reducer'\r\n\r\nlet clicks = [] // All the clicked card-indices serially stored\r\n\r\nconst getInitialState = () => {\r\n    return getInitialCards()\r\n}\r\n\r\nconst Game = props => {\r\n    const [cards, dispatch] = useReducer(cardsReducer, getInitialState())\r\n\r\n    const [allClicks, setAllClicks] = useState([])  // Array of all the Cards Indices that user clicks\r\n    const [repeatClicks, setRepeatClicks] = useState(0) // A Nunber representing Repeat clicks on cards\r\n    const [matchFound, setMatchFound] = useState(0) // Number of matches so far\r\n\r\n    const flipCard = i => {\r\n        // if it is a Done card, do nothing\r\n        // if already flipped. do nothing\r\n        if (cards[i].isDone || cards[i].isFlipped) return\r\n\r\n        // Check if it is a repeat click\r\n        if(allClicks.includes(i)) setRepeatClicks(repeatClicks + 1)\r\n\r\n        // Record this click index, [to be tallied with future/next click index]\r\n        let clicks = [...allClicks, i]\r\n        setAllClicks(clicks)\r\n        // clicks.push(i)\r\n        console.log('click no. ', clicks.length)\r\n\r\n        //Check with prev Index, is it a match ?\r\n        let j = clicks[clicks.length - 2]   //1st time it will try to read index -1\r\n        if (!isNaN(j) && isMatch(i, j)) {\r\n            // Mark them as done\r\n            markAsDone(i)\r\n            markAsDone(j)\r\n            console.log('Found 1 ...')\r\n            setMatchFound(matchFound + 1)\r\n        }\r\n        else {\r\n            markFlipped(i, true)\r\n            console.log('Nope ...')\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Int} i | \r\n     * @param {Int} j \r\n     */\r\n    const isMatch = (i, j) => cards[i].imgUrl === cards[j].imgUrl\r\n\r\n    const markAsDone = i => {\r\n        dispatch({type: MARK_AS_DONE, payload: {index: i}})\r\n    }\r\n\r\n    /**\r\n     * Whatever isFlipped will get auto unflipped after certain period\r\n     * @param {int} i | index\r\n     */\r\n    const markFlipped = (i, isFlipped = false) => {\r\n        dispatch({ \r\n            type: MARK_AS_FLIPPED, \r\n            payload: {\r\n                index: i,\r\n                isFlipped\r\n            }\r\n        })\r\n\r\n        // autoUnFlip after 1 sec\r\n        if (isFlipped) {\r\n            setTimeout(() => markFlipped(i), 3000)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2 className={styles.pageHeader}>Flip / Flap</h2>\r\n            \r\n            <div className={styles.scores}>\r\n                <ScoreUnit title=\"Clicks\" value={allClicks.length} />\r\n                <ScoreUnit title=\"Repeat Clicks\" value={repeatClicks} />\r\n                <ScoreUnit title=\"Matches\" value={`${matchFound} / 8`} />\r\n            </div>\r\n\r\n            <div className={styles.boxContainer}>\r\n                {\r\n                    cards.map((c, i) =>\r\n                        <div key={i} className={styles.box}>\r\n                            <div\r\n                                className={clsx(styles.boxInner, (c.isFlipped || c.isDone) && styles.isFlipped)}\r\n                                onClick={() => flipCard(i)}\r\n                            >\r\n                                <div\r\n                                    className={clsx(styles.cardFace, styles.cardFaceFront)}\r\n                                >\r\n                                    <span className={styles.fftxt}>f/f</span>\r\n                                </div>\r\n\r\n                                <div\r\n                                    className={clsx(styles.cardFace, styles.cardFaceBack)}\r\n                                >\r\n                                    <img className={styles.gameImg} src={c.imgUrl} />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game","import images from './game.images'\r\n\r\n/**\r\n * Prepares and returns an array of 16 card objects\r\n * Each card object will be a JSON of structure\r\n * {\r\n        id: Integer,\r\n        imgUrl: String,\r\n        isFlipped: Boolean\r\n * }\r\n * \r\n * But these 16 cards will point to 8 unique image URLs,\r\n * That means, a pair of cards will point to each unique image \r\n * And thus, 8 pairs = 16 cards\r\n */\r\nexport const getInitialCards = () => {\r\n    let imgList = [...images.list]\r\n\r\n    // Let's randomly pick 8 images\r\n    // as we are going to have 16 cards, so 8 pair 8 = 16\r\n    while (imgList.length > 8) {\r\n        let i = Math.floor(Math.random() * imgList.length)  // pick a random index\r\n        imgList.splice(i, 1)    // remove that index\r\n    }\r\n\r\n    // console.log(imgList)\r\n\r\n    let doubleList = [...imgList, ...imgList]\r\n\r\n    // console.log(doubleList)\r\n\r\n    // Shuffle the list 100 times\r\n    for (let i = 0; i < 1000; i++) {\r\n        let j = Math.floor(Math.random() * doubleList.length)\r\n        let k = Math.floor(Math.random() * doubleList.length)\r\n\r\n        // swap if not equal\r\n        if (j !== k) {\r\n            let temp = doubleList[j]\r\n            doubleList[j] = doubleList[k]\r\n            doubleList[k] = temp\r\n        }\r\n    }\r\n\r\n    // console.log(doubleList)\r\n\r\n    let newCards = doubleList.map((img, i) => ({\r\n        id: i,\r\n        imgUrl: `${images.root}/${img}`,\r\n        isFlipped: false\r\n    }))\r\n\r\n    return newCards\r\n}","import React from 'react';\nimport { Game } from './pages'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}